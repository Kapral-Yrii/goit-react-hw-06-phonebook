{"version":3,"sources":["App.module.css","components/ContactListItem/ContactListItem.module.css","components/Filter/Filter.module.css","components/ContactList/ContactList.module.css","components/Notification/Notification.module.css","redux/contacts/contacts-actions.js","redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.js","components/ContactListItem/ContactListItem.js","components/ContactList/ContactList.js","components/Filter/Filter.js","components/Notification/Notification.js","App.js","redux/contacts/contacts-reducers.js","redux/store.js","index.js","components/ContactForm/ContactForm.module.css"],"names":["module","exports","deleteContact","createAction","addNewContact","filterContactByName","getItems","state","contacts","items","getFilter","filter","ContactForm","useState","name","setName","number","setNumber","useSelector","dispatch","useDispatch","handleChange","useCallback","e","target","value","handleSubmit","preventDefault","newContact","id","uuid","checkSameContact","find","toLowerCase","alert","actions","resetForm","onSubmit","className","s","form","label","input","onChange","type","pattern","title","required","button","ContactListItem","filterContacts","useMemo","includes","map","item","onClick","ContactList","list","Filter","Notification","App","app","length","createReducer","payload","_","combineReducers","persistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","contactsReducer","devTools","process","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.4b4f5032.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__ZO_m7\",\"title\":\"App_title__3POR-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ContactListItem_item__ZEwbR\",\"button\":\"ContactListItem_button__3363D\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__3tYu7\",\"input\":\"Filter_input__3M1Jo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__3gPEb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Notification_title__1hrSo\"};","import { createAction } from \"@reduxjs/toolkit\";\r\n\r\nexport const deleteContact = createAction('contacts/delete')\r\nexport const addNewContact = createAction('contacts/add')\r\nexport const filterContactByName = createAction('contacts/filterByName')","export const getItems = state => state.contacts.items\r\nexport const getFilter = state => state.contacts.filter","import PropTypes from 'prop-types'\r\nimport { v4 as uuid } from 'uuid'\r\nimport s from './ContactForm.module.css'\r\nimport { useState, useCallback } from 'react'\r\nimport {useSelector, useDispatch} from 'react-redux'\r\nimport * as actions from '../../redux/contacts/contacts-actions'\r\nimport { getItems } from '../../redux/contacts/contacts-selectors'\r\n\r\nexport function ContactForm() {\r\n    const [name, setName] = useState('')\r\n    const [number, setNumber] = useState('')\r\n    const contacts = useSelector(getItems)\r\n    const dispatch = useDispatch() \r\n  \r\n\r\n    const handleChange = useCallback((e) => {\r\n        switch (e.target.name) {\r\n            case 'name':\r\n                setName(e.target.value)\r\n                break\r\n            case 'number':\r\n                setNumber(e.target.value)\r\n                break\r\n            default:\r\n                return\r\n        }\r\n    }, [])\r\n    \r\n    const handleSubmit = useCallback((e) => {\r\n      e.preventDefault()\r\n      const contactId = uuid()\r\n      const newContact = {\r\n        id: contactId,\r\n        name: name,\r\n        number: number,\r\n      }\r\n      const checkSameContact = contacts.find(e => e.name.toLowerCase() === newContact.name.toLowerCase())\r\n      if (!checkSameContact) {\r\n        dispatch(actions.addNewContact(newContact))\r\n      } else {\r\n        alert(`${checkSameContact.name} is already in contacts`)\r\n      }\r\n\r\n      resetForm()\r\n    }, [contacts, dispatch, name, number])\r\n\r\n    const resetForm = () => {\r\n        setName('')\r\n        setNumber('')\r\n    }\r\n\r\n    return(\r\n      <form onSubmit={handleSubmit} className={s.form}>\r\n        <label className={s.label}>\r\n          Name\r\n          <input\r\n            className={s.input}\r\n            onChange={handleChange}\r\n            type=\"text\"\r\n            name=\"name\"\r\n            value={name}\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n          />\r\n        </label>\r\n        <label className={s.label}>\r\n          Number\r\n          <input\r\n            className={s.input}\r\n            onChange={handleChange}\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            value={number}\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            required\r\n          />\r\n        </label>\r\n        <button type=\"submit\" className={s.button}>Add contact</button>\r\n      </form>\r\n    )\r\n}\r\n\r\nContactForm.propTypes = {\r\n  contacts: PropTypes.array,\r\n  dispatch: PropTypes.func\r\n}","import PropTypes from 'prop-types'\r\nimport { v4 as uuid } from 'uuid'\r\nimport s from './ContactListItem.module.css'\r\nimport { useMemo } from 'react'\r\nimport {useSelector, useDispatch} from 'react-redux'\r\nimport * as actions from '../../redux/contacts/contacts-actions'\r\nimport { getItems, getFilter } from '../../redux/contacts/contacts-selectors'\r\n\r\nexport function ContactListItem() {\r\n    const contacts = useSelector(getItems)\r\n    const filter = useSelector(getFilter)\r\n    const dispatch = useDispatch()\r\n\r\n    const filterContacts = useMemo(() => contacts.filter(e => e.name.toLowerCase().includes(filter)), [contacts, filter])\r\n    \r\n    return (\r\n        <>\r\n            {filterContacts.map(e => {\r\n                return (\r\n                    <li className={s.item} key={uuid()}>\r\n                        {e.name}: {e.number}\r\n                        <button\r\n                            className={s.button}\r\n                            onClick={() => dispatch(actions.deleteContact(e.id))}\r\n                            data-id={e.id}>\r\n                            X\r\n                        </button>\r\n                    </li>\r\n                )\r\n            })}\r\n        </>\r\n    )\r\n}\r\n\r\nContactListItem.propTypes = {\r\n    contacts: PropTypes.array,\r\n    filter: PropTypes.string,\r\n    dispatch: PropTypes.func\r\n}","import { ContactListItem } from '../ContactListItem/ContactListItem'\r\nimport s from './ContactList.module.css'\r\n\r\nexport function ContactList() {\r\n    return (\r\n        <ul className={s.list}>\r\n           <ContactListItem /> \r\n        </ul>\r\n    )\r\n}","import PropTypes from 'prop-types'\r\nimport s from './Filter.module.css'\r\nimport {useDispatch} from 'react-redux'\r\nimport * as actions from '../../redux/contacts/contacts-actions'\r\nimport { useCallback } from 'react'\r\n\r\nexport function Filter() {\r\n    const dispatch = useDispatch()\r\n\r\n    const onChange = useCallback((e) => {\r\n        const value = e.target.value.toLowerCase()\r\n        dispatch(actions.filterContactByName(value))\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <>\r\n            <label className={s.label}>\r\n                Find contact by name\r\n                <input className={s.input} type=\"text\" onChange={onChange}/>\r\n            </label>\r\n            \r\n        </>\r\n    )\r\n}\r\n\r\nFilter.propTypes = {\r\n    dispatch: PropTypes.func\r\n}\r\n","import s from './Notification.module.css'\r\nexport function Notification() {\r\n    return (\r\n        <p className={s.title}>Contact list is empty</p>\r\n    )\r\n}","import s from './App.module.css';\r\nimport { ContactForm } from './components/ContactForm/ContactForm'\r\nimport { ContactList } from './components/ContactList/ContactList'\r\nimport { Filter } from './components/Filter/Filter'\r\nimport { Notification } from './components/Notification/Notification'\r\nimport {useSelector} from 'react-redux'\r\n\r\n\r\nfunction App() {\r\n  const contacts = useSelector(state => state.contacts.items)\r\n  \r\n  return (\r\n    <div className={s.app}>\r\n      <h1 className={s.title}>Phonebook</h1>\r\n      <ContactForm />\r\n      <h2 className={s.title}>Contacts</h2>\r\n      {contacts.length > 0 ? (\r\n        <>\r\n          <Filter />\r\n          <ContactList />\r\n        </>\r\n      ) : (<Notification/>)}\r\n    </div>)\r\n}\r\n\r\nexport default App;","import { createReducer } from \"@reduxjs/toolkit\";\r\nimport { combineReducers } from \"redux\";\r\nimport * as actions from './contacts-actions'\r\n\r\nconst items = createReducer([], {\r\n    [actions.deleteContact]: (state, { payload }) => state.filter(e => e.id !== payload),\r\n    [actions.addNewContact]: (state, { payload }) => [...state, payload]\r\n})\r\n\r\nconst filter = createReducer('', {\r\n    [actions.filterContactByName]: (_, { payload }) => payload\r\n})\r\n\r\nexport default combineReducers({\r\n    items,\r\n    filter,\r\n})","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\r\nimport contactsReducer from './contacts/contacts-reducers';\r\nimport { persistStore, persistReducer, FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER } from \"redux-persist\";\r\nimport storage from 'redux-persist/lib/storage';\r\n\r\nconst persistConfig = {\r\n    key: 'contacts',\r\n    storage,\r\n    blacklist: ['filter']\r\n}\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        contacts: persistReducer(persistConfig, contactsReducer)\r\n    },\r\n    devTools: process.env.NODE_ENV === 'development',\r\n    middleware: getDefaultMiddleware({\r\n      serializableCheck: {\r\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER]\r\n      }\r\n    })\r\n})\r\n\r\nconst persistor = persistStore(store)\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default { store, persistor }","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux';\r\nimport store from './redux/store'\r\nimport { PersistGate } from 'redux-persist/integration/react'\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store.store}>\r\n      <PersistGate loading={null} persistor={store.persistor}>\r\n        <App />\r\n      </PersistGate>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__No02y\",\"label\":\"ContactForm_label__q3Wmi ContactForm_form__No02y\",\"input\":\"ContactForm_input__3IczT\",\"button\":\"ContactForm_button__2Cqq8 ContactForm_input__3IczT\"};"],"sourceRoot":""}